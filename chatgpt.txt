// ImageToTextScreen.js ///////////////////////////////////////////////////////////////////////////////////////////
import React, { useState, useContext } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  Image,
  ActivityIndicator,
  Alert,
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { SupabaseContext } from '../SupabaseProvider';
import * as FileSystem from 'expo-file-system';
import { StatusBar } from 'expo-status-bar';

export default function ImageToTextScreen({ navigation }) {
  const supabase = useContext(SupabaseContext);
  const [image, setImage] = useState(null);
  const [text, setText] = useState('');
  const [loading, setLoading] = useState(false);
  const [profilePic, setProfilePic] = useState(null); // State for profile picture
  const API_KEY = 'AIzaSyCGbEVnVkDEtg5y4tBnH5es3TcApzEfWFc'; // Your Google Vision API Key
  const API_URL = 'https://vision.googleapis.com/v1/images:annotate';

  // Pick an image for OCR
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1], // Square aspect ratio
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
      setText('');
    }
  };

  // Pick a profile picture
  const pickProfilePic = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      setProfilePic(result.assets[0].uri);
    }
  };

  // Extract text from image using Google Vision API
  const extractText = async () => {
    if (!image) return;

    setLoading(true);
    try {
      // Convert image to base64 format
      const base64Image = await FileSystem.readAsStringAsync(image, {
        encoding: FileSystem.EncodingType.Base64,
      });

      // Prepare the request payload for Google Vision API
      const payload = {
        requests: [
          {
            image: {
              content: base64Image, // Base64 encoded image
            },
            features: [
              {
                type: 'TEXT_DETECTION', // You can change this to other detection types if needed
                maxResults: 1,
              },
            ],
          },
        ],
      };

      // Send the request to Google Vision API
      const response = await fetch(`https://vision.googleapis.com/v1/images:annotate?key=${API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const result = await response.json();
      if (result.responses && result.responses[0].fullTextAnnotation) {
        setText(result.responses[0].fullTextAnnotation.text); // Set the extracted text
      } else {
        Alert.alert('Error', 'No text found in the image.');
      }
    } catch (error) {
      console.error('Error during text extraction:', error);
      Alert.alert('Error', 'Failed to extract text. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Log out
  const handleLogOut = async () => {
    await supabase.auth.signOut();
    navigation.replace('Login');
  };

  return (
    <View style={styles.container}>
      <StatusBar style="auto" />
      <TouchableOpacity
        style={styles.profileIcon}
        onPress={() => pickProfilePic()}
      >
        <Image
          source={profilePic ? { uri: profilePic } : require('../assets/default-profile.png')}
          style={styles.profileImage}
        />
      </TouchableOpacity>
      <Text style={styles.title}>Image to Text</Text>
      <TouchableOpacity style={styles.dropArea} onPress={pickImage}>
        {image ? (
          <Image source={{ uri: image }} style={styles.imagePreview} />
        ) : (
          <Text style={styles.dropAreaText}>Drop or Paste Image Here</Text>
        )}
      </TouchableOpacity>
      <TouchableOpacity
        style={[styles.button, { backgroundColor: '#4CAF50' }]}
        onPress={extractText}
        disabled={!image || loading}
      >
        <Text style={styles.buttonText}>
          {loading ? 'Processing...' : 'Extract Text'}
        </Text>
      </TouchableOpacity>
      {loading && <ActivityIndicator size="large" color="#0000ff" />}
      {text ? (
        <View style={styles.resultContainer}>
          <Text style={styles.resultTitle}>Extracted Text:</Text>
          <Text style={styles.resultText}>{text}</Text>
        </View>
      ) : null}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  profileIcon: {
    position: 'absolute',
    top: 20,
    right: 20,
  },
  profileImage: {
    width: 50,
    height: 50,
    borderRadius: 25,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  dropArea: {
    height: 300,
    borderWidth: 2,
    borderColor: '#ddd',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    marginBottom: 10,
    marginTop: 20,
  },
  dropAreaText: {
    fontSize: 18,
    color: '#aaa',
  },
  imagePreview: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
    resizeMode: 'contain',
  },
  button: {
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginVertical: 10,
    width: '100%',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  resultContainer: {
    marginTop: 20,
    padding: 10,
    backgroundColor: '#ffffff',
    borderRadius: 8,
    width: '100%',
  },
  resultTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  resultText: {
    fontSize: 16,
    color: '#333',
  },
});
// LoginScreen.js ////////////////////////////////////////////////////////////////////////////////////////////////
import React, { useState, useContext } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from 'react-native';
import { SupabaseContext } from '../SupabaseProvider';

export default function LoginScreen({ navigation }) {
  const supabase = useContext(SupabaseContext);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  // Handle Sign-Up
  const handleSignUp = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please enter both email and password.');
      return;
    }

    try {
      const { error } = await supabase.auth.signUp({
        email,
        password,
      });

      if (error) {
        Alert.alert('Sign Up Failed', error.message);
      } else {
        Alert.alert('Success', 'Account created successfully! Please log in.');
      }
    } catch (error) {
      console.error('Sign-Up error:', error);
      Alert.alert('Error', 'Something went wrong. Please try again.');
    }
  };

  // Handle Log-In
  const handleLogin = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please enter both email and password.');
      return;
    }

    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        Alert.alert('Login Failed', error.message);
      } else {
        navigation.navigate('ImageToText');
      }
    } catch (error) {
      console.error('Login error:', error);
      Alert.alert('Error', 'Something went wrong. Please try again.');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      {/* Log In Button */}
      <TouchableOpacity style={styles.button} onPress={handleLogin}>
        <Text style={styles.buttonText}>Log In</Text>
      </TouchableOpacity>
      {/* Sign Up Button */}
      <TouchableOpacity style={[styles.button, { backgroundColor: '#4CAF50' }]} onPress={handleSignUp}>
        <Text style={styles.buttonText}>Sign Up</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  input: {
    width: '100%',
    height: 50,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    marginBottom: 20,
    paddingHorizontal: 10,
  },
  button: {
    backgroundColor: '#2196F3',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    width: '100%',
    marginVertical: 5,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
// App.js
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { SupabaseProvider } from './SupabaseProvider'; // Create a provider for Supabase
import LoginScreen from './screens/LoginScreen';
import ImageToTextScreen from './screens/ImageToTextScreen';

const Stack = createStackNavigator();

export default function App() {
  return (
    <SupabaseProvider>
      <NavigationContainer>
        <Stack.Navigator initialRouteName="Login">
          <Stack.Screen name="Login" component={LoginScreen} options={{ headerShown: false }} />
          <Stack.Screen name="ImageToText" component={ImageToTextScreen} options={{ title: 'Image to Text' }} />
        </Stack.Navigator>
      </NavigationContainer>
    </SupabaseProvider>
  );
}
//SupabaseProvider.js
import React, { createContext } from 'react';
import { createClient } from '@supabase/supabase-js';

export const SupabaseContext = createContext();

const supabaseUrl = 'https://swvrzgrpqspparlibyug.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN3dnJ6Z3JwcXNwcGFybGlieXVnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzA0MzMyOTEsImV4cCI6MjA0NjAwOTI5MX0.CwYqmcQ5f2JT5A8THcsLwoTHA0S0w4joeeFApyscqOg';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

export const SupabaseProvider = ({ children }) => {
  return (
    <SupabaseContext.Provider value={supabase}>
      {children}
    </SupabaseContext.Provider>
  );
};
